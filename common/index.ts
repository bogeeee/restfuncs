

export type CSRFProtectionMode = "preflight" | "corsReadToken" | "csrfToken"

/**
 * The info that's needed  to set up a socket connection
 */
export type WelcomeInfo = {
    classId: string,
    /**
     * Undefined, if it the server does not support engine.io
     */
    engineIoPath?: string
};

export interface IServerSession {
    /**
     * The client needs to know some things, before creating the socket connection
     */
    getWelcomeInfo(): WelcomeInfo;
}

export type Socket_Client2ServerMessage = {
    type: "methodCall" | "getVersion"
    payload: Socket_MethodCall | unknown
}

export type Socket_MethodCall = {
    /**
     * Generated by the client
     */
    callId: number

    serverSessionClassId?: string

    methodName: string,
    args: unknown[]
}

export type Socket_Server2ClientMessage = {
    type: "methodCallResult" | "getVersion"
    payload: Socket_MethodCallResult | unknown
}

export type Socket_MethodCallResult = {
    /**
     * Generated by the client
     */
    callId: number

    result?: unknown

    /**
     * Behaves as close as possible to the http api
     */
    httpStatusCode: number

    /**
     * If an error occurred
     */
    error?: object

    /**
     * If this is needed to proceed the call
     */
    httpCookieSessionAndSecurityProperties_question?: string
}